count = 0

array = [1, 2, 3, 4, 5, 6, 7, 8, 9]
array = [9, 8, 7, 6, 5, 4, 3, 2, 1]


def merge_sort(L):  # «разделяй»
    if len(L) < 2:  # если кусок массива равен 2,
        return L[:]  # выходим из рекурсии
    else:
        middle = len(L) // 2  # ищем середину
        left = merge_sort(L[:middle])  # рекурсивно делим левую часть
        right = merge_sort(L[middle:])  # и правую
        return merge(left, right)  # выполняем слияние


def merge(left, right):  # «властвуй»
    global count
    result = []  # результирующий массив
    i, j = 0, 0  # указатели на элементы

    # пока указатели не вышли за границы
    while i < len(left) and j < len(right):

        if left[i] < right[j]:
            result.append(left[i])
            i += 1
            count += 1
        else:
            result.append(right[j])
            j += 1
            count += 1

    # добавляем хвосты
    while i < len(left):
        result.append(left[i])
        i += 1
        # count += 1

    while j < len(right):
        result.append(right[j])
        j += 1
        # count += 1
    print(count)
    return result



print(merge_sort(array))
print(count)
#
# В начале итерации устанавливается ведущий элемент. На первой итерации — самый первый элемент и по умолчанию он
# считается уже отсортированным.
# Сохраняем ведущий элемент в дополнительную переменную (красный квадрат в анимации).
# Далее происходит поиск места, куда должен встать ведущий элемент в уже отсортированной (левой) части массива. Можно,
# например, использовать цикл while с условием достижения границы и/или успешным нахождением элемента. Пока условие
# цикла выполняется, происходит сдвиг каждого элемента вправо.
# По завершении цикла сохранённое значение переменной помещается на освободившееся место. Алгоритм завершается.
